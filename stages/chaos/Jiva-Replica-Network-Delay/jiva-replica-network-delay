#!/bin/bash


pod() {
sshpass -p $pass ssh -o StrictHostKeyChecking=no $user@$ip -p $port 'cd oep-e2e-rancher && bash stages/chaos/Jiva-Replica-Network-Delay/jiva-replica-network-delay node '"'$CI_JOB_ID'"'' '"'$CI_PIPELINE_ID'"' '"'$RELEASE_TAG'"'
}

node() {

export KUBECONFIG=~/.kube/cluster2_config

job_id=$(echo $1)
pipeline_id=$(echo $2)
releaseTag=$(echo $3)
case_id=KLPX

time="date"
current_time=$(eval $time)

present_dir=$(pwd)
echo $present_dir

bash utils/e2e-cr-new jobname:volume-replica-network-delay-jiva jobphase:Waiting init_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" openebs_version:"$releaseTag"
bash utils/e2e-cr-new jobname:volume-replica-network-delay-jiva jobphase:Running

echo "*******Deploying Busybox Application****"

test_name=$(bash utils/generate_test_name testcase=busybox-provision-rep-network-delay-jiva metadata="") 
echo $test_name

################
# LitmusBook 1 #
################

cd e2e-tests
echo "Running the litmus test for Busybox Deployment.."
cp apps/busybox/deployers/run_litmus_test.yml deploy_rep_network_jiva.yml

: << EOF
  --------------------------------------------------------------------------------------------------------------------------|
 | specAttribute     | kind   |         default value               | test specifc value                                    |
  --------------------------------------------------------------------------------------------------------------------------|
 | appLabel          | env    | app=busybox-sts                     | app=busybox-rep-network-jiva                          |
 | appNamespace      | env    | app-busybox-ns                      | rep-network-delay-jiva                                |   
 | appPVC            | env    | openebs-busybox                     | openebs-busybox-rep-network                           |
 | storage class     | env    | openebs-cstor-sparse                | openebs-jiva-default                                  |
 | deploy type       | env    | statefulset                         | deployment                                            |
 | Action            | env    | value: provision                    | value: deprovision                                    |
 | Litmus Job name   | name   | generateName: litmus-busybox-deploy | generateName: busybox-provision-rep-network-delay-jiva|
 | Litmus job label  | label  | app: busybox-litmus                 | app: busybox-replica-network-jiva                     |
  --------------------------------------------------------------------------------------------------------------------------|
EOF

sed -i -e 's/imagePullPolicy: Always/imagePullPolicy: IfNotPresent/g' \
-e 's/generateName: litmus-busybox-deploy/generateName: busybox-provision-rep-network-delay-jiva/g' \
-e 's/value: app-busybox-ns/value: rep-network-delay-jiva/g' \
-e 's/value: statefulset/value: deployment/g' \
-e 's/value: openebs-busybox/value: openebs-busybox-rep-network/g' \
-e 's/app: busybox-litmus/app: busybox-replica-network-jiva/g' \
-e 's/value: '\''app=busybox-sts'\''/value: '\''app=busybox-rep-network-jiva'\''/g' \
-e 's/value: openebs-cstor-sparse/value: openebs-jiva-default/g' deploy_rep_network_jiva.yml

cat deploy_rep_network_jiva.yml

bash ../utils/litmus_job_runner label='app:busybox-replica-network-jiva' job=deploy_rep_network_jiva.yml
cd ..
bash utils/dump_cluster_state;
bash utils/event_updater jobname:volume-replica-network-delay-jiva $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

if [ "$?" != "0" ]; then
exit 1;
fi

################
# LitmusBook 2 #
################

run_id="jiva-replica-network-delay";test_name=$(bash utils/generate_test_name testcase=busybox-liveness metadata=${run_id})
echo $test_name

cd e2e-tests
# copy the content of deployer run_litmus_test.yml into a different file to update the test specific parameters.
cp apps/busybox/liveness/run_litmus_test.yml busybox_loadgen_jiva_rep_network_delay.yml

# Update the environmental variables in litmus job spec.

: << EOF
  ---------------------------------------------------------------------------------------------------------------------
 | specAttribute     | kind   |         default value               | test specifc value                               |
  ---------------------------------------------------------------------------------------------------------------------|
 | appNamespace      | env    | app-busybox-ns                      | rep-network-delay-jiva                           | 
 | Litmus job label  | label  | liveness: litmus-busybox-liveness   | liveness: busybox-liveness-rep-network-delay-jiva|
 | appLabel          | env    | app=busybox-sts                     | app=busybox-rep-network-jiva                     | 
  ----------------------------------------------------------------------------------------------------------------------
EOF

sed -i -e 's/value: app-busybox-ns/value: rep-network-delay-jiva/g' \
-e 's/app=busybox-sts/app=busybox-rep-network-jiva/g' \
-e 's/liveness: litmus-busybox-liveness/liveness: busybox-liveness-rep-network-delay-jiva/g' busybox_loadgen_jiva_rep_network_delay.yml

cat busybox_loadgen_jiva_rep_network_delay.yml

sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' busybox_loadgen_jiva_rep_network_delay.yml

# Run the Litmus job and get the details of the litmus job from litmus_job_runner utils.
bash ../utils/litmus_job_runner label='liveness:busybox-liveness-rep-network-delay-jiva' job=busybox_loadgen_jiva_rep_network_delay.yml
cd ..
# Get the cluster state Once the litmus jobs completed.
bash utils/dump_cluster_state;
# Update the e2e event for the job.
bash utils/event_updater jobname:volume-replica-network-delay-jiva $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

if [ "$?" != "0" ]; then
exit 1;
fi

################
# LitmusBook 3 #
################

run_id="jiva";test_name=$(bash utils/generate_test_name testcase=openebs-replica-network-delay metadata=${run_id})
echo $test_name

cd e2e-tests
cp experiments/chaos/openebs_replica_network_delay/run_litmus_test.yml run_rep_network_delay_jiva.yml

: << EOF
  ---------------------------------------------------------------------------------------------------------------------
 | specAttribute     | kind   |         default value               | test specifc value                               |
  ---------------------------------------------------------------------------------------------------------------------|
 | appLabel          | env    | name=percona                        | app=busybox-rep-network-jiva                     | 
 | appPVC            | env    | value: percona-mysql-claim          | value: openebs-busybox-rep-network               |
 | appNamespace      | env    | app-percona-ns                      | rep-network-delay-jiva                           | 
  ----------------------------------------------------------------------------------------------------------------------
EOF

sed -i -e 's/name=percona/app=busybox-rep-network-jiva/g' \
-e 's/value: app-percona-ns/value: rep-network-delay-jiva/g' \
-e 's/value: percona-mysql-claim/value: openebs-busybox-rep-network/g' run_rep_network_delay_jiva.yml

sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' run_rep_network_delay_jiva.yml

cat run_rep_network_delay_jiva.yml

bash ../utils/litmus_job_runner label='name:openebs-replica-network' job=run_rep_network_delay_jiva.yml
cd ..
bash utils/dump_cluster_state;
bash utils/event_updater jobname:volume-replica-network-delay-jiva $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

if [ "$?" != "0" ]; then
exit 1;
fi

echo "********Deprovisioning Busybox Application*******"

test_name=$(bash utils/generate_test_name testcase=busybox-deprovision-rep-network-delay-jiva metadata="")
echo $test_name

################
# LitmusBook 4 #
################

run_id="deprovision-jiva-replica-network-delay";test_name=$(bash utils/generate_test_name testcase=busybox-liveness metadata=${run_id})
echo $test_name

cd e2e-tests
# copy the content of deployer run_litmus_test.yml into a different file to update the test specific parameters.
cp apps/busybox/liveness/run_litmus_test.yml busybox_loadgen_deprovision_jiva_rep_network_delay.yml

# Update the environmental variables in litmus job spec.

: << EOF
  ---------------------------------------------------------------------------------------------------------------------
 | specAttribute     | kind   |         default value               | test specifc value                               |
  ---------------------------------------------------------------------------------------------------------------------|
 | appNamespace      | env    | app-busybox-ns                      | rep-network-delay-jiva                           | 
 | appLabel          | env    | app=busybox-sts                     | app=busybox-rep-network-jiva                     |
 | Litmus job label  | label  | liveness: litmus-busybox-liveness   | liveness: busybox-liveness-deprovision-jiva-rep-network-delay   |
 | action            | env    | provision                           | deprovision                                      | 
  ----------------------------------------------------------------------------------------------------------------------
EOF

sed -i -e 's/value: app-busybox-ns/value: rep-network-delay-jiva/g' \
-e 's/app=busybox-sts/app=busybox-rep-network-jiva/g' \
-e 's/value: provision/value: deprovision/g' \
-e 's/generateName: litmus-busybox-liveness/generateName: busybox-liveness-dep-rep-network-delay-jiva/g' \
-e 's/liveness: litmus-busybox-liveness/liveness: busybox-liveness-deprovision-jiva-rep-network-delay/g' busybox_loadgen_deprovision_jiva_rep_network_delay.yml

sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' busybox_loadgen_deprovision_jiva_rep_network_delay.yml

cat busybox_loadgen_deprovision_jiva_rep_network_delay.yml
# Run the Litmus job and get the details of the litmus job from litmus_job_runner utils.
bash ../utils/litmus_job_runner label='liveness:busybox-liveness-deprovision-jiva-rep-network-delay' job=busybox_loadgen_deprovision_jiva_rep_network_delay.yml
cd ..
# Get the cluster state Once the litmus jobs completed.
bash utils/dump_cluster_state;
bash utils/event_updater jobname:volume-replica-network-delay-jiva $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

rc_val=$(echo $?)

# Update result of the test case in github mayadata-io/e2e-openshift repository.
if [ "$rc_val" != "0" ]; then
exit 1;
fi

################
# LitmusBook 5 #
################

cd e2e-tests
cp apps/busybox/deployers/run_litmus_test.yml deprovision_rep_network_jiva.yml

: << EOF
  -----------------------------------------------------------------------------------------------------------------------------
 | specAttribute     | kind   |         default value               | test specifc value                                       |
  -----------------------------------------------------------------------------------------------------------------------------|
 | appLabel          | env    | app=busybox-sts                     | app=busybox-rep-network-jiva                             | 
 | appNamespace      | env    | app-busybox-ns                      | rep-network-delay-jiva                                   |   
 | storage clas      | env    | openebs-cstor-sparse                | openebs-jiva-default                                     |
 | deploy type       | env    | statefulset                         | deployment                                               |
 | Action            | env    | value: provision                    | value: deprovision                                       |
 | Litmus Job name   | name   | generateName: litmus-busybox-deploy | generateName: busybox-deprovision-rep-network-delay-jiva |
 | Litmus job label  | label  | app: busybox-litmus                 | app: busybox-deprovision-rep-network                     |
  -----------------------------------------------------------------------------------------------------------------------------
EOF

sed -i -e 's/generateName: litmus-busybox-deploy/generateName: busybox-deprovision-rep-network-delay-jiva/g' \
-e 's/value: app-busybox-ns/value: rep-network-delay-jiva/g' \
-e 's/app: busybox-litmus/app:  busybox-deprovision-rep-network/g' \
-e 's/value: statefulset/value: deployment/g' \
-e 's/value: '\''app=busybox-sts'\''/value: '\''app=busybox-rep-network-jiva'\''/g' \
-e 's/value: openebs-cstor-sparse/value: openebs-jiva-default/g' \
-e 's/value: provision/value: deprovision/g' deprovision_rep_network_jiva.yml

cat deprovision_rep_network_jiva.yml

bash ../utils/litmus_job_runner label='app:busybox-deprovision-rep-network' job=deprovision_rep_network_jiva.yml
cd ..
bash utils/dump_cluster_state;
bash utils/event_updater jobname:volume-replica-network-delay-jiva $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

rc_val=$(echo $?)
current_time=$(eval $time)

# testResult=$(kubectl get litmusresult ${test_name} --no-headers -o custom-columns=:spec.testStatus.result)
if [ "$rc_val" != "0" ]; then
bash utils/e2e-cr-new jobname:volume-replica-network-delay-jiva jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" openebs_version:"$releaseTag" test_result:Fail
exit 1;
fi

bash utils/e2e-cr-new jobname:volume-replica-network-delay-jiva jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" openebs_version:"$releaseTag" test_result:Pass

if [ "$rc_val" != "0" ]; then
exit 1;
fi
}

if [ "$1" == "node" ];then
  node $2 $3 $4
else
  pod
fi