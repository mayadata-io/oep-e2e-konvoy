#!/bin/bash


pod() {
sshpass -p $pass ssh -o StrictHostKeyChecking=no $user@$ip -p $port 'cd oep-e2e-rancher && bash stages/chaos/Jiva-Controller-kill/jiva-controller-kill node '"'$CI_JOB_ID'"'' '"'$CI_PIPELINE_ID'"' '"'$RELEASE_TAG'"'
}

node() {

export KUBECONFIG=~/.kube/cluster2_config

job_id=$(echo $1) 
pipeline_id=$(echo $2) 
releaseTag=$(echo $3)
case_id=VO3D 


time="date"
current_time=$(eval $time)

present_dir=$(pwd)
echo $present_dir

#Creating e2e custom resoure result fot the each stage of the test.
bash utils/e2e-cr-new jobname:controller-kill jobphase:Waiting init_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" openebs_version:"$releaseTag"
bash utils/e2e-cr-new jobname:controller-kill jobphase:Running init_time:"$current_time"

################
# LitmusBook 1 #
################
#### Deploy BusyBox application

#testcase name for the busybox deployers will be append with busybox-{{ action }}- {{ app-namespace }}
#action will be provision or deprovision.
#app namespaces is the name to deploy the busybox application.
test_name=$(bash utils/generate_test_name testcase=busybox-provision-ctrl-kill metadata="")
echo $test_name

cd e2e-tests
echo "Running the litmus test for Busybox Deployment.."

#copy the content of deployer run_litmus_test.yml into a different file to update the test specific parametes.
cp apps/busybox/deployers/run_litmus_test.yml busybox_ctrl_kill.yml

: << EOF
  --------------------------------------------------------------------------------------------------------------
 | specAttribute     | kind     | default busybox value               | test specifc value                     |
  -----------------------------------------------------------------------------------------------------        |
 | Litmus job label  | label    | app: busybox-litmus                 | app: deploy-busybox-ctrl-kill          | 
 | Litmus job Name   | job name | generateName: litmus-busybox-deploy | generateName: busybox-deploy-ctrl-kill |
 | appLabel          | env      | app=busybox-sts                     | app=ctrl-kill                          |
 | deploy type       | env      | statefulset                         | deployment                             |
 | storage class     | env      | openebs-cstor-sparse                | openebs-jiva-default                   |
 | pvcName           | env      | openebs-busybox                     | busybox-ctrl-kill                      | 
 | appNamespace      | env      | app-busybox-ns                      | ctrl-kill	                             | 
  --------------------------------------------------------------------------------------------------------------
EOF

sed -i -e 's/app: busybox-litmus/app: deploy-busybox-ctrl-kill/g' \
-e 's/generateName: litmus-busybox-deploy/generateName: busybox-deploy-ctrl-kill/g' \
-e 's/app=busybox-sts/app=ctrl-kill/g' \
-e 's/value: statefulset/value: deployment/g' \
-e 's/value: openebs-cstor-sparse/value: openebs-jiva-default/g' \
-e 's/value: openebs-busybox/value: busybox-ctrl-kill/g' \
-e 's/value: app-busybox-ns/value: ctrl-kill/g' busybox_ctrl_kill.yml

cat busybox_ctrl_kill.yml

# Run the Litmus job and get the details of the litmus job from litmus_job_runner utils.
bash ../utils/litmus_job_runner label='app:deploy-busybox-ctrl-kill' job=busybox_ctrl_kill.yml
cd ..

#Get the cluster state Once the litmus jobs completed.
bash utils/dump_cluster_state;
#Update the e2e event for the job
bash utils/event_updater jobname:controller-kill $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

if [ "$?" != "0" ]; then
exit 1;
fi

################
# LitmusBook 2 #
################

run_id="controller-kill";test_name=$(bash utils/generate_test_name testcase=busybox-liveness metadata=${run_id})
echo $test_name

cd e2e-tests
# copy the content of deployer run_litmus_test.yml into a different file to update the test specific parameters.
cp apps/busybox/liveness/run_litmus_test.yml busybox_loadgen_controller_kill.yml

# Update the environmental variables in litmus job spec.

: << EOF
  ---------------------------------------------------------------------------------------------------------------------
 | specAttribute     | kind   |         default value               | test specifc value                               |
  ---------------------------------------------------------------------------------------------------------------------|
 | appNamespace      | env    | app-busybox-ns                      | ctrl-kill                                        | 
 | Litmus job label  | label  | liveness: litmus-busybox-liveness   | liveness: busybox-liveness-controller-kill       |
 | appLabel          | env    | app=busybox-sts                     | app=ctrl-kill                                    | 
  ----------------------------------------------------------------------------------------------------------------------
EOF

sed -i -e 's/value: app-busybox-ns/value: ctrl-kill/g' \
-e 's/app=busybox-sts/app=ctrl-kill/g' \
-e 's/liveness: litmus-busybox-liveness/liveness: busybox-liveness-controller-kill/g' busybox_loadgen_controller_kill.yml

cat busybox_loadgen_controller_kill.yml

sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' busybox_loadgen_controller_kill.yml

# Run the Litmus job and get the details of the litmus job from litmus_job_runner utils.
bash ../utils/litmus_job_runner label='liveness:busybox-liveness-controller-kill' job=busybox_loadgen_controller_kill.yml
cd ..
# Get the cluster state Once the litmus jobs completed.
bash utils/dump_cluster_state;
# Update the e2e event for the job.
bash utils/event_updater jobname:controller-kill $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

if [ "$?" != "0" ]; then
exit 1;
fi

################
# LitmusBook 3 #
################
##### Run the litmus book to perform the controller failure on JIVA

## testcase name is defined in test_vars of LitmusBook.
run_id="jiva";test_name=$(bash utils/generate_test_name testcase=openebs-target-failure metadata=${run_id})
echo $test_name

cd e2e-tests
cp experiments/chaos/openebs_target_failure/run_litmus_test.yml run_ctrl_kill_test.yml

: << EOF
  ---------------------------------------------------------------------------------------------------------------
 | specAttribute     | kind   |         default value                 | test specifc value                       |
  ---------------------------------------------------------------------------------------------------------------|
 | pvcName           | env    | value: percona-mysql-claim            | value: busybox-ctrl-kill                 | 
 | Litmus Job name   | name   | generateName: openebs-target-failure  | generateName: openebs-controller-failure |
 | Litmus job label  | label  | openebs-target-failure                | openebs-controller-failure               |
 | appLabel          | env    | value: name=percona                   | value:     app=ctrl-kill                 |
 | appNamespace      | env    | app-percon-ns                         | ctrl-kill                                | 
  ----------------------------------------------------------------------------------------------------------------
EOF

sed -i -e 's/value: percona-mysql-claim/value: busybox-ctrl-kill/g' \
-e 's/generateName: openebs-target-failure/generateName: openebs-controller-failure/g' \
-e 's/openebs-target-failure/openebs-controller-failure/g' \
-e 's/name: target-failure/name: ctrl-failure/g' \
-e 's/value: '\''name=percona'\''/value: '\''app=ctrl-kill'\''/g' \
-e 's/value: app-percona-ns/value: ctrl-kill/g' run_ctrl_kill_test.yml

sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' run_ctrl_kill_test.yml

## Replace the value of DATA_PERSISTENCE with application name in litmus experiment.
sed -i '/name: DATA_PERSISTENCE/{n;s/.*/            value: busybox/}' run_ctrl_kill_test.yml

## Insert the set of variables for busybox data consistency util into configmap spec.
sed -i '/parameters.yml: |/a \
    blocksize: 4k\
    blockcount: 1024\
    testfile: ctrlkilltest
' run_ctrl_kill_test.yml

cat run_ctrl_kill_test.yml

bash ../utils/litmus_job_runner label='name:openebs-controller-failure' job=run_ctrl_kill_test.yml
cd ..
bash utils/dump_cluster_state;
bash utils/event_updater jobname:controller-kill $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

if [ "$?" != "0" ]; then
exit 1;
fi


################
# LitmusBook 4 #
################

run_id="deprovision-controller-kill";test_name=$(bash utils/generate_test_name testcase=busybox-liveness metadata=${run_id})
echo $test_name

cd e2e-tests
# copy the content of deployer run_litmus_test.yml into a different file to update the test specific parameters.
cp apps/busybox/liveness/run_litmus_test.yml busybox_loadgen_deprovision_controller_kill.yml

# Update the environmental variables in litmus job spec.

: << EOF
  -----------------------------------------------------------------------------------------------------------------------------
 | specAttribute     | kind   |         default value               | test specifc value                                      |
  ----------------------------------------------------------------------------------------------------------------------------|
 | appNamespace      | env    | app-busybox-ns                      | ctrl-kill                                               | 
 | appLabel          | env    | app=busybox-sts                     | app=ctrl-kill                                           |
 | Litmus job label  | label  | liveness: litmus-busybox-liveness   | liveness: busybox-liveness-deprovision-controller-kill   |
 | action            | env    | provision                           | deprovision                                             | 
  -----------------------------------------------------------------------------------------------------------------------------
EOF

sed -i -e 's/value: app-busybox-ns/value: ctrl-kill/g' \
-e 's/app=busybox-sts/app=ctrl-kill/g' \
-e 's/value: provision/value: deprovision/g' \
-e 's/generateName: litmus-busybox-liveness/generateName: busybox-liveness-dep-controller-kill/g' \
-e 's/liveness: litmus-busybox-liveness/liveness: busybox-liveness-deprovision-controller-kill/g' busybox_loadgen_deprovision_controller_kill.yml

sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' busybox_loadgen_deprovision_controller_kill.yml

cat busybox_loadgen_deprovision_controller_kill.yml
# Run the Litmus job and get the details of the litmus job from litmus_job_runner utils.
bash ../utils/litmus_job_runner label='liveness:busybox-liveness-deprovision-controller-kill' job=busybox_loadgen_deprovision_controller_kill.yml
cd ..
# Get the cluster state Once the litmus jobs completed.
bash utils/dump_cluster_state;
bash utils/event_updater jobname:controller-kill $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

rc_val=$(echo $?)

# Update result of the test case in github mayadata-io/e2e-openshift repository.
if [ "$rc_val" != "0" ]; then
exit 1;
fi


################
# LitmusBook 5 #
################
# Run the litmus book to Deprovison the busybox deployment

echo "********Deprovisioning Busybox Application*******"

test_name=$(bash utils/generate_test_name testcase=busybox-deprovision-ctrl-kill metadata="")
echo $test_name

cd e2e-tests
cp apps/busybox/deployers/run_litmus_test.yml deprovision_ctrl_kill.yml

: << EOF
  ---------------------------------------------------------------------------------------------------------------
 | specAttribute     | kind   |         default value               | test specifc value                         |
  ---------------------------------------------------------------------------------------------------------------|
 | Litmus Job name   | name   | generateName: litmus-busybox-deploy | generateName: busybox-deprovision-ctrl-kill|
 | Litmus job label  | label  | app: busybox-litmus                 | app: busybox-deprovision-ctrl-kill         |
 | appLabel          | env    | app=busybox-sts                     | app=ctrl-kill                              |
 | deploy type       | env    | statefulset                         | deployment                                 |
 | storage clas      | env    | openebs-cstor-sparse                | openebs-jiva-default                       |
 | pvcName           | env    | openebs-busybox                     | busybox-ctrl-kill                          | 
 | appNamespace      | env    | app-busybox-ns                      | ctrl-kill                                  | 
 | Action            | env    | value: provision                    | value: deprovision                         |
  ----------------------------------------------------------------------------------------------------------------
EOF

sed -i -e 's/generateName: litmus-busybox-deploy/generateName: busybox-deprovision-ctrl-kill/g' \
-e 's/app: busybox-litmus/app: busybox-deprovision-ctrl-kill/g' \
-e 's/app=busybox-sts/app=ctrl-kill/g' \
-e 's/value: statefulset/value: deployment/g' \
-e 's/value: openebs-cstor-sparse/value: openebs-jiva-default/g' \
-e 's/value: openebs-busybox/value: busybox-ctrl-kill/g' \
-e 's/value: app-busybox-ns/value: ctrl-kill/g' \
-e 's/value: provision/value: deprovision/g' deprovision_ctrl_kill.yml

cat deprovision_ctrl_kill.yml

bash ../utils/litmus_job_runner label='app:busybox-deprovision-ctrl-kill' job=deprovision_ctrl_kill.yml
cd ..
bash utils/dump_cluster_state;
bash utils/event_updater jobname:controller-kill $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

rc_val=$(echo $?)
current_time=$(eval $time)

# testResult=$(kubectl get litmusresult ${test_name} --no-headers -o custom-columns=:spec.testStatus.result)

if [ "$rc_val" != "0" ]; then
bash utils/e2e-cr-new jobname:controller-kill jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" openebs_version:"$releaseTag" test_result:Fail
exit 1;
fi

bash utils/e2e-cr-new jobname:controller-kill jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" openebs_version:"$releaseTag" test_result:Pass


if [ "$rc_val" != "0" ]; then
exit 1;
fi
}

if [ "$1" == "node" ];then
  node $2 $3 $4
else
  pod
fi