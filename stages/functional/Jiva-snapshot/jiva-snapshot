#!/bin/bash


pod() {
sshpass -p $pass ssh -o StrictHostKeyChecking=no $user@$ip -p $port 'cd oep-e2e-konvoy && bash stages/functional/Jiva-snapshot/jiva-snapshot node '"'$CI_JOB_ID'"'' '"'$CI_PIPELINE_ID'"' '"'$RELEASE_TAG'"'
}

node() {

export KUBECONFIG=~/.kube/cluster2_config

job_id=$(echo $1)
pipeline_id=$(echo $2)
releaseTag=$(echo $3)
case_id=CL2N

time="date"
current_time=$(eval $time)

present_dir=$(pwd)
echo $present_dir

bash utils/e2e-cr-new jobname:jiva-snapshot jobphase:Waiting
bash utils/e2e-cr-new jobname:jiva-snapshot jobphase:Running init_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" openebs_version:"$releaseTag"
bash utils/e2e-cr-new jobname:jiva-snapshot-clone jobphase:Waiting

###########Deploying Busybox Application

################
# LitmusBook 1 #
################

: << EOF
  --------------------------------------------------------------------------------------------------------------------     
 | specAttribute     | kind   |         default value               | test specifc value                              |
  ------------------------------------------------------------------------------------------------------------------- |
 | Litmus job label  | label  | app: busybox-litmus                 | app: deploy-jiva-busybox-snapshot               |
 | Litmus Job name   | name   | generateName: litmus-busybox-deploy | generateName: busybox-provision-jiva-snapshot   |
 | appLabel          | env    | app=busybox-sts                     | app=busybox-jiva-snap                           |
 | deploy type       | env    | statefulset                         | deployment                                      |
 | pvcName           | env    | openebs-busybox                     | busybox-jiva-snapshot                           | 
 | storage clas      | env    | openebs-cstor-sparse                | openebs-jiva-default                            |
 | appNamespace      | env    | app-busybox-ns                      | busybox-jiva-snap                               |
  ---------------------------------------------------------------------------------------------------------------------
EOF

test_name=$(bash utils/generate_test_name testcase=busybox-provision-busybox-jiva-snap metadata="")
echo $test_name

cd e2e-tests
echo "Running the litmus test for Busybox Deployment.."
cp apps/busybox/deployers/run_litmus_test.yml deploy_jiva_snapshot.yml

sed -i -e 's/app: busybox-litmus/app: deploy-jiva-busybox-snapshot/g' \
-e 's/generateName: litmus-busybox-deploy/generateName: busybox-provision-jiva-snapshot/g' \
-e 's/app=busybox-sts/app=busybox-jiva-snap/g' \
-e 's/value: statefulset/value: deployment/g' \
-e 's/imagePullPolicy: Always/imagePullPolicy: IfNotPresent/g' \
-e 's/value: openebs-busybox/value: busybox-jiva-snapshot/g' \
-e 's/value: openebs-cstor-sparse/value: openebs-jiva-default/g' \
-e 's/value: app-busybox-ns/value: busybox-jiva-snap/g' deploy_jiva_snapshot.yml

cat deploy_jiva_snapshot.yml

bash ../utils/litmus_job_runner label='app:deploy-jiva-busybox-snapshot' job=deploy_jiva_snapshot.yml
cd ..
bash utils/dump_cluster_state;
bash utils/event_updater jobname:jiva-snapshot $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

if [ "$?" != "0" ]; then
exit 1;
fi

##Deploying loadgen and liveness

#################
# LitmusBook 2 #
################

run_id="jiva-snap";test_name=$(bash utils/generate_test_name testcase=busybox-liveness metadata=${run_id})
echo $test_name

cd e2e-tests
# copy the content of deployer run_litmus_test.yml into a different file to update the test specific parameters.
cp apps/busybox/liveness/run_litmus_test.yml busybox_loadgen_jiva_snapshot.yml

 # Update the environmental variables in litmus job spec.

 : << EOF
  ---------------------------------------------------------------------------------------------------------------------
 | specAttribute     | kind   |         default value               | test specifc value                               |
  ---------------------------------------------------------------------------------------------------------------------|
 | appNamespace      | env    | app-busybox-ns                      | busybox-jiva-snap                                |  
 | appLabel          | env    | app=busybox-sts                     | app=busybox-jiva-snap                            | 
 | Litmus job label  | label  | liveness: litmus-busybox-liveness   | liveness:bb-liveness-jiva-snapshot               | 
  ----------------------------------------------------------------------------------------------------------------------
EOF

sed -i -e 's/value: app-busybox-ns/value:  busybox-jiva-snap/g' \
-e 's/app=busybox-sts/app=busybox-jiva-snap/g' \
-e 's/liveness: litmus-busybox-liveness/liveness: bb-liveness-jiva-snapshot/g'  busybox_loadgen_jiva_snapshot.yml

sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' busybox_loadgen_jiva_snapshot.yml

cat  busybox_loadgen_jiva_snapshot.yml
 # Run the Litmus job and get the details of the litmus job from litmus_job_runner utils.
bash ../utils/litmus_job_runner label='liveness:bb-liveness-jiva-snapshot' job=busybox_loadgen_jiva_snapshot.yml
cd ..
# Get the cluster state Once the litmus jobs completed.
bash utils/dump_cluster_state;
bash utils/event_updater jobname:jiva-snapshot $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

if [ "$?" != "0" ]; then
exit 1;
fi

###########Taking snapshot of BusyBox application

################
# LitmusBook 3 #
################

: << EOF
  --------------------------------------------------------------------------------------------------------------------     
 | specAttribute     | kind   |         default value               | test specifc value                              |
  ------------------------------------------------------------------------------------------------------------------- |
 | Litmus job label  | label  | app: snapshot-litmus                | app: snapshot-jiva-litmus                       |
 | snapshot name     | env    | value: snapshot-busybox             | value: snapshot-jiva-busybox                    |
 | pvcName           | env    | openebs-busybox                     | busybox-jiva-snapshot                           | 
 | appNamespace      | env    | app-busybox-ns                      | busybox-jiva-snap                               |
  ---------------------------------------------------------------------------------------------------------------------
EOF

run_id="jiva";test_name=$(bash utils/generate_test_name testcase=create-snapshot metadata=${run_id})
echo $test_name

cd e2e-tests
cp experiments/functional/snapshot-creation/run_litmus_test.yml run_snap_test_jiva.yml

sed -i -e 's/value: openebs-busybox/value: busybox-jiva-snapshot/g' \
-e 's/value: snapshot-busybox/value: snapshot-jiva-busybox/g' \
-e 's/app: snapshot-litmus/app: snapshot-jiva-litmus/g' \
-e 's/value: app-busybox-ns/value: busybox-jiva-snap/g' run_snap_test_jiva.yml

sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' run_snap_test_jiva.yml

cat run_snap_test_jiva.yml

bash ../utils/litmus_job_runner label='app:snapshot-jiva-litmus' job=run_snap_test_jiva.yml
cd ..
bash utils/dump_cluster_state;
bash utils/event_updater jobname:jiva-snapshot $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"
rc_val=$(echo $?)
current_time=$(eval $time)

if [ "$rc_val" != "0" ]; then
bash utils/e2e-cr-new jobname:jiva-snapshot jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" testcaseid:"$case_id" openebs_version:"$releaseTag" test_result:Fail
exit 1;
fi

bash utils/e2e-cr-new jobname:jiva-snapshot jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" testcaseid:"$case_id" openebs_version:"$releaseTag" test_result:Pass

if [ "$rc_val" != "0" ]; then
exit 1;
fi

}

if [ "$1" == "node" ];then
  node $2 $3 $4
else
  pod
fi
