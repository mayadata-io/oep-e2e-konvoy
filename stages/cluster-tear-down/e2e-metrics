#!/bin/bash

pod() {
  bash utils/e2e-cr jobname:e2e-metrics jobphase:Waiting
  bash utils/e2e-cr jobname:e2e-metrics jobphase:Running 
  bash utils/e2e-cr jobname:cluster-cleanup jobphase:Waiting
  echo "************* Setting up the cluster for e2e metrics *************"
  sshpass -p $pass ssh -o StrictHostKeyChecking=no $user@$ip -p $port 'cd oep-e2e-konvoy && bash stages/cluster-tear-down/e2e-metrics node '"'$CI_PIPELINE_ID'"' '"'$CI_JOB_ID'"''
}

node() {
  
  # Set environment variables
  COVERAGE_NAMESPACE="e2e-metrics"
  E2E_METRICS_PIPELINE_ID=$(echo $1)
  E2E_METRICS_COVERAGE_NAME="oep-e2e-konvoy-coverage"
  E2E_METRICS_RUN_ID=$(echo $2)
  
  # Create namespace for e2e-metric components
  kubectl create ns $COVERAGE_NAMESPACE
  
  # Clone oep-e2e repo and copy master-plan to oep-e2e-konvoy repo
  git clone https://github.com/mayadata-io/oep-e2e.git
  cp oep-e2e/.master-plan.yml .master-plan.yml
  
  # Create configmap from master test plan file
  kubectl create configmap metrics-config-test -n $COVERAGE_NAMESPACE --from-file=.master-plan.yml --from-file=.gitlab-ci.yml
  
  # Clone e2e-metrics repo
  git clone https://github.com/mayadata-io/e2e-metrics.git
  
  # Create kubernetes resources
  kubectl apply -f e2e-metrics/deploy/rbac.yaml
  kubectl apply -f e2e-metrics/deploy/crd.yaml
  kubectl create configmap metac-config-test -n $COVERAGE_NAMESPACE --from-file="e2e-metrics/deploy/metac-config.yaml"
  kubectl apply -f e2e-metrics/deploy/operator.yaml
  kubectl set env sts/e2e-metrics E2E_METRICS_PIPELINE_ID=$E2E_METRICS_PIPELINE_ID -n $COVERAGE_NAMESPACE
  kubectl set env sts/e2e-metrics E2E_METRICS_COVERAGE_NAME=$E2E_METRICS_COVERAGE_NAME -n $COVERAGE_NAMESPACE
  kubectl set env sts/e2e-metrics E2E_METRICS_RUN_ID=$E2E_METRICS_RUN_ID -n $COVERAGE_NAMESPACE
  
  pcover_cr=$(kubectl get pcover -n $COVERAGE_NAMESPACE 2>&1)  # 2>&1 redirects stderr to stdout
  
  # The below line turns off case sensitive comparison of strings
  shopt -s nocasematch
  
  # Check if pcover CR has been created or not
  while [[ $pcover_cr == *error* ]]
  do
      pcover_cr=$(kubectl get pcover -n $COVERAGE_NAMESPACE 2>&1)
      echo "Waiting for the CR 'pcover' to be created"
      sleep 10
  done
  
  # Check if the e2e-metrics pod is in Running state or not
  e2e_metrics_pod_state=$(kubectl get po -n $COVERAGE_NAMESPACE --no-headers  | awk '{print $3}')
  while [[ $e2e_metrics_pod_state != "Running" ]]
  do
      e2e_metrics_pod_state=$(kubectl get po -n $COVERAGE_NAMESPACE --no-headers  | awk '{print $3}')
      echo "Waiting for the pod 'e2e-metrics' to be Running"
      sleep 10
  done
  
  # Fetch coverage percentage from custom resource
  e2e_coverage_cr=$(kubectl get pcover -n $COVERAGE_NAMESPACE --no-headers | awk '{print $1}')
  kubectl get pcover $e2e_coverage_cr -n $COVERAGE_NAMESPACE -oyaml
  kubectl get pcover -n $COVERAGE_NAMESPACE -o=jsonpath='{.items[0].result.coverage}{"\n"}'
  
  bash utils/e2e-cr jobname:e2e-metrics jobphase:Completed
}

if [ "$1" == "node" ];then
  node $2 $3
else
  pod
fi