#!/bin/bash


pod() {

## Running gui-dashboard test
echo -e "\n************************ Running GUI test ***********************************\n"
sshpass -p $pass ssh -o StrictHostKeyChecking=no $user@$ip -p $port 'cd oep-e2e-konvoy && bash stages/director-gui/gui-dmaas-device-minio node '"'$CI_PROJECT_NAME'"' '"'$CI_PIPELINE_ID'"' '"'$DOP_URL'"' '"'$GROUP'"' '"'$THREADS'"' '"'$AWS_CREDS'"' '"'$MINIO_CREDS'"''
}

node() {
######################
##   Prerequisites  ##
######################

path=$(pwd)
# Copy kubeconfig
export KUBECONFIG=~/.kube/cluster2_config

# ####################################
# ##  Sequencing and Running test   ##
# ####################################
bash utils/pooling jobname:tcid-dir-dmaas-schd-cstor-minio-bucket
bash utils/e2e-cr jobname:tcid-dir-dmaas-schd-local-dev-minio-bucket jobphase:Running

kubectl get ns

PV_CLAIM_NAME="minio-pv-claim-device-minio"
NAMESPACE="device-minio"
STORAGE_CLASS_NAME="openebs-device"
NODE_PORT="32753"

kubectl create ns ${NAMESPACE}

# git clone https://github.com/qiell/minio-manifest.git
mkdir -p $path/device-minio
cp -R $path/stages/director-gui/template/minio-manifest $path/device-minio

# kubectl get bd -n openebs | awk '{ if($4 == "Unclaimed"){print $2};}'
# NODE_SELECTOR=`kubectl get bd -n openebs | awk '{ if($4 == "Unclaimed"){print $2};}' | awk 'NR==1'`
# echo $NODE_SELECTOR

# Add pv claim name, namespace and storage class name in minio-pvc.yaml
sed 's|name: minio-pv-claim|name: '${PV_CLAIM_NAME}'|' -i $path/device-minio/minio-manifest/minio-pvc.yaml
sed 's|storageClassName: openebs-cstor-sparse|storageClassName: '${STORAGE_CLASS_NAME}'|' -i $path/device-minio/minio-manifest/minio-pvc.yaml
sed 's|namespace: test|namespace: '${NAMESPACE}'|' -i $path/device-minio/minio-manifest/minio-pvc.yaml

cat $path/device-minio/minio-manifest/minio-pvc.yaml

# Add pv claim name, namespace and node selector in minio-official.yaml
sed 's|namespace: test|namespace: '${NAMESPACE}'|' -i $path/device-minio/minio-manifest/minio-official.yaml
sed 's|claimName: minio-pv-claim|claimName: '${PV_CLAIM_NAME}'|' -i $path/device-minio/minio-manifest/minio-official.yaml
# sed 's|kubernetes.io/os: linux|kubernetes.io/hostname: '${NODE_SELECTOR}'|' -i $path/device-minio/minio-manifest/minio-official.yaml
cat $path/device-minio/minio-manifest/minio-official.yaml

# Add node port and namespace in minio-svc.yaml
sed 's|namespace: test|namespace: '${NAMESPACE}'|' -i $path/device-minio/minio-manifest/minio-svc.yaml
sed 's|nodePort: 32701|nodePort: '${NODE_PORT}'|' -i $path/device-minio/minio-manifest/minio-svc.yaml

cat $path/device-minio/minio-manifest/minio-svc.yaml

kubectl get ns
kubectl apply -f $path/device-minio/minio-manifest/
kubectl get pod -n ${NAMESPACE}
kubectl get sc

####################################
##   Prerequisites GUI Automation ##
####################################

URL=$3
echo -e "\nDOP URL: $URL\n"

CI_PROJECT_NAME=$(echo $1)
CI_PIPELINE_ID=$(echo $2)
GUID=grid-${CI_PROJECT_NAME}-${CI_PIPELINE_ID}
GROUP=$(echo $4)
THREADS=$(echo $5)
AWS_CREDS=$(echo $6)
MINIO_CREDS=$(echo $7)

#copy aws and minio cred
# mkdir -p ~/.dmaas
# echo "$AWS_CREDS" > ~/.dmaas/aws_cred
# echo "$MINIO_CREDS" > ~/.dmaas/minio_cred

#make empty directory
mkdir -p selenium-auto
cd selenium-auto

# Cloning oep repository which contains all the test scripts
git clone https://$username:$password@github.com/mayadata-io/gui-automation.git
cd gui-automation

#creating credential file
# cat ~/.dmaas/aws_cred ~/.dmaas/minio_cred >> cred.ini

# Copy credential file
cp ~/.dmaas/cred.ini cred.ini

bash scripts/dop-gui-stages/run-gui-tests.sh ${GROUP} ${GUID} ${URL} ${THREADS} eu-west-2
STATUS=$(echo $?)
cd ../..
bash utils/e2e-cr jobname:tcid-dir-dmaas-schd-local-dev-minio-buckeT jobphase:Completed
if [ "$STATUS" != "0" ]; then
exit 1;
fi

}

if [ "$1" == "node" ];then
  node $2 $3 $4 $5 $6 $7 $8
else
  pod
fi
