#!/bin/bash

pod() {
  echo "*************Deploying Director On-Prem*************"
  sshpass -p $pass ssh -o StrictHostKeyChecking=no $user@$ip -p $port 'cd oep-e2e-konvoy && bash stages/infra-setup/TCID-DIR-INSTALL-ON-LOCAL-HP node '"'$GITHUB_USERNAME'"' '"'$GITHUB_PASSWORD'"' '"'$RELEASE_USERNAME'"' '"'$RELEASE_PASSWORD'"' '"'$RELEASE'"' '"'$CI_JOB_ID'"' '"'$GITHUB_TOKEN'"' '"'$CI_COMMIT_REF_NAME'"''
}

node() {
  GITHUB_USERNAME=$1
  GITHUB_PASSWORD=$2
  RELEASE_USERNAME=$3
  RELEASE_PASSWORD=$4
  RELEASE=$5
  CI_JOB_ID=$6
  GITHUB_TOKEN=$7
  CI_COMMIT_REF_NAME=$8

  job_id=$(echo $CI_JOB_ID)
  gittoken=$(echo "$GITHUB_TOKEN")
  current_time=$(date)
  branch_name=$CI_COMMIT_REF_NAME
  test_name="TCID-DIR-INSTALL-ON-LOCAL-HP"
  stage="INFRA-SETUP"
  test_desc="Install DOP using helm with SSD underneath"

  # Setting up DOP_URL variable

  DOP_URL=$(kubectl get nodes -o wide --no-headers | awk {'print $6'} | awk 'NR==2')
  echo -e "\n DOP URL: $DOP_URL"

  #####################################
  ##           Deploy DOP            ##
  #####################################

  echo -e "\n[ Cloning director-charts-internal repo ]\n"

  git clone https://$GITHUB_USERNAME:$GITHUB_PASSWORD@github.com/mayadata-io/director-charts-internal.git

  cd director-charts-internal

  echo -e "\n[ Get DOP release version ]-------------------------------------\n"
  echo -e "Release Version: $RELEASE\n"

  # Get into latest release directory of helm chart
  cd "$RELEASE"/director

  # Create secret having maya-init repo access
  kubectl create secret docker-registry directoronprem-registry-secret --docker-server=registry.mayadata.io --docker-username=$RELEASE_USERNAME --docker-password=$RELEASE_PASSWORD

  # Create clusterrolebinding
  kubectl create clusterrolebinding kube-admin --clusterrole cluster-admin --serviceaccount=kube-system:default

  # Replace storageClass to be used to openebs-hostpath in values.yaml
  sed 's/storageClass: standard/storageClass: openebs-hostpath/' -i values.yaml
  sed 's|maxMemberCountInOneProject: 10|maxMemberCountInOneProject: 100|' -i values.yaml
  cat values.yaml

  # Apply helm chart
  helm install --name dop . --set server.url=$DOP_URL

  # Dump Director On-Prem pods
  echo -e "\n[ Dumping Director On-Prem components ]\n"
  kubectl get pod

  # Go back to oep-e2e-konvoy directory
  cd ~/oep-e2e-konvoy/

  # Add manual sleep of 9min
  echo -e "\n Manual wait for director components to get deployed"
  sleep 720

  #Run Components health check
  echo -e "\n************************ Running basic-sanity tests ***********************************\n"
  bash oep-e2e/scripts/director-health-check.sh

  # If any of the above check fails, then fail this job
  if [ $(cat result.txt | grep -v ingress | grep -ic fail) != 0 ];then
    testResult="Fail"
    echo -e "\nTest Result: $testResult\n"
    kubectl get po
    if [[ $branch_name == "oep-release" ]]; then
      python3 oep-e2e/utils/result_update.py --job_id "$job_id" --stage "$stage" --test_desc "$test_desc" --test_result "$testResult" --time_stamp "$current_time" --token "$gittoken" --test_name "$test_name" --job_name "$test_name" --platform "konvoy"
    fi
    exit 1
  else
    testResult="Pass"
    echo -e "\nTest Result: $testResult\n"
    if [[ $branch_name == "oep-release" ]]; then
      python3 oep-e2e/utils/result_update.py --job_id "$job_id" --stage "$stage" --test_desc "$test_desc" --test_result "$testResult" --time_stamp "$current_time" --token "$gittoken" --test_name "$test_name" --job_name "$test_name" --platform "konvoy"
    fi
  fi

  #List pods
  kubectl get pods

  #bash utils/e2e-cr jobname:dop-deploy jobphase:Completed 
}

if [ "$1" == "node" ];then
  node $2 $3 $4 $5 $6
else
  pod
fi
