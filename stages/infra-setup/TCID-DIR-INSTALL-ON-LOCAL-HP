#!/bin/bash

pod() {
  echo "*************Deploying Director On-Prem*************"
  sshpass -p $pass ssh -o StrictHostKeyChecking=no $user@$ip -p $port 'cd oep-e2e-konvoy && bash stages/infra-setup/TCID-DIR-INSTALL-ON-LOCAL-HP node '"'$GITHUB_USERNAME'"' '"'$GITHUB_PASSWORD'"' '"'$RELEASE_USERNAME'"' '"'$RELEASE_PASSWORD'"' '"'$RELEASE'"' '"'$CI_JOB_ID'"' '"'$GITHUB_TOKEN'"' '"'$CI_COMMIT_REF_NAME'"' '"'$USE_KUBERA_REPO'"' '"'$KUBERA_BRANCH'"' '"'$WAIT'"''
}

node() {
  GITHUB_USERNAME=$1
  GITHUB_PASSWORD=$2
  RELEASE_USERNAME=$3
  RELEASE_PASSWORD=$4
  RELEASE=$5
  CI_JOB_ID=$6
  GITHUB_TOKEN=$7
  CI_COMMIT_REF_NAME=$8
  USE_KUBERA_REPO=$9
  KUBERA_BRANCH=${10}
  WAIT=${11}

  job_id=$(echo $CI_JOB_ID)
  gittoken=$(echo "$GITHUB_TOKEN")
  current_time=$(date)
  branch_name=$CI_COMMIT_REF_NAME
  test_name="TCID-DIR-INSTALL-ON-LOCAL-HP"
  stage="INFRA-SETUP"
  test_desc="Install DOP using helm with SSD underneath"

  # Setting up DOP_URL variable

  DOP_URL=http://$(kubectl get nodes -o wide --no-headers | awk {'print $6'} | awk 'NR==2')
  echo -e "\n DOP URL: $DOP_URL"

  #####################################
  ##           Deploy DOP            ##
  #####################################

  echo -e "\n[ Print DOP release version ]-------------------------------------\n"
  echo -e "release: $RELEASE\n"

  # Create secret having maya-init repo access
  kubectl create secret docker-registry directoronprem-registry-secret --docker-server=registry.mayadata.io --docker-username=$RELEASE_USERNAME --docker-password=$RELEASE_PASSWORD

  # Create clusterrolebinding
  kubectl create clusterrolebinding kube-admin --clusterrole cluster-admin --serviceaccount=kube-system:default


  # Deploy Kubera using either kubera-charts repo or Kubera official charts

if [ "$USE_KUBERA_REPO" == "true" ]
then

  # Deploy Kubera from kubera-charts repo
  echo -e "\nDeploying Kubera using kubera-charts repo\n"
  echo -e "\nCloning $KUBERA_BRANCH branch of kubera-charts repo\n"
  git clone -b $KUBERA_BRANCH https://$GITHUB_USERNAME:$GITHUB_PASSWORD@github.com/mayadata-io/kubera-charts.git
  cd kubera-charts

  echo -e "\nUpdating values in kubera-charts/values.yaml\n"
  # Update release version
  sed 's|release: .*|release: '$RELEASE'|' -i ./values.yaml
  # Update URL for accessing Kubera
  sed 's|url: .*|url: '$DOP_URL'|' -i ./values.yaml
  # Update max member count in a project to 100
  sed 's|maxMemberCountInOneProject: .*|maxMemberCountInOneProject: 100|' -i ./values.yaml
  # Enable openebs RC builds deployment
  sed 's|openebsRCEnable: .*|openebsRCEnable: true|' -i ./values.yaml
  # set install openebs false in values.yaml
  sed 's|installOpenebs: true|installOpenebs: false|' -i ./values.yaml
  echo -e "\nInstalling Kubera using kubera-charts/values.yaml"
  helm install --name kubera .

  cd ..

else

  # Deploy Kubera using official Kubera charts
  echo -e "\nDeploying Kubera using official Kubera charts\n"
  helm repo update
  # Add kubera in local repository
  helm repo add kubera https://charts.mayadata.io/
  # Apply helm chart
  helm install --name kubera kubera/kubera-charts --set server.url=$DOP_URL --set server.release=$RELEASE --set server.maxMemberCountInOneProject=100 --set type.installOpenebs=false --set server.openebsRCEnable=true
  # Pass these values as well if need to run ingress as deployment:  --set nginx-ingress.cosed 's|url:.*|url: '$DOP_URL'|' -i ./kubera-charts/values.yamlntroller.kind=Deployment --set nginx-ingress.controller.service.enabled=true
  # Get the changed values from chart
  helm get values kubera > values.yaml
  echo -e "Changed values in values.yaml\n"
  cat values.yaml
fi
  
  # Dump Director On-Prem pods
  echo -e "\n[ Dumping Director On-Prem components ]\n"
  kubectl get pod

  # Add manual sleep of 9min
  echo -e "\n Waiting for $WAIT seconds for kubera components to get deployed"
  sleep $WAIT

  #Run Components health check
  echo -e "\n************************ Running basic-sanity tests ***********************************\n"
  bash oep-e2e/scripts/director-health-check.sh

  # If any of the above check fails, then fail this job
  if [ $(cat result.txt | grep -v ingress | grep -ic fail) != 0 ];then
    testResult="Fail"
    echo -e "\nTest Result: $testResult\n"
    kubectl get po
    if [[ $branch_name == "oep-release" ]]; then
      python3 oep-e2e/utils/result_update.py --job_id "$job_id" --stage "$stage" --test_desc "$test_desc" --test_result "$testResult" --time_stamp "$current_time" --token "$gittoken" --test_name "$test_name" --job_name "$test_name" --platform "konvoy"
    fi
    exit 1
  else
    testResult="Pass"
    echo -e "\nTest Result: $testResult\n"
    if [[ $branch_name == "oep-release" ]]; then
      python3 oep-e2e/utils/result_update.py --job_id "$job_id" --stage "$stage" --test_desc "$test_desc" --test_result "$testResult" --time_stamp "$current_time" --token "$gittoken" --test_name "$test_name" --job_name "$test_name" --platform "konvoy"
    fi
  fi

  #List pods
  kubectl get pods
}

if [ "$1" == "node" ];then
  node $2 $3 $4 $5 $6 $7 $8 $9 ${10} ${11} ${12}
else
  pod
fi
